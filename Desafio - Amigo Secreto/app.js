const nomes = [];
const nomeInput = document.getElementById("nomeInput");
const adicionarBtn = document.getElementById("adicionarBtn");
const sortearBtn = document.getElementById("sortearBtn");
const limparBtn = document.getElementById("limparBtn");
const listaNomes = document.getElementById("listaNomes");
const resultado = document.getElementById("resultado");
const sorteados = [];

function atualizarBotoes() {
  // Ativar bot√£o sortear quando tiver 2 ou mais nomes
  sortearBtn.disabled = nomes.length < 2;

  // Ativar bot√£o limpar quando tiver pelo menos 1 nome
  limparBtn.disabled = nomes.length === 0;
}

function adicionarNome() {
  const nome = nomeInput.value.trim();
  if (nome && !nomes.includes(nome)) {
    // Verifica se o nome n√£o est√° vazio e n√£o foi adicionado
    nomes.push(nome); // Adiciona o nome ao array
    nomeInput.value = ""; // Limpa o campo de entrada
    const li = document.createElement("li"); // Cria um novo elemento de lista
    li.textContent = nome;
    listaNomes.appendChild(li); // Adiciona o nome √† lista

    nomeInput.value = "";
    atualizarBotoes(); // Atualiza o estado dos bot√µes
  } else {
    alert("Nome inv√°lido ou j√° adicionado.");
  }
}

function sortearNomes() {
  /*
  üéØ FUN√á√ÉO: sortearNomes()
  
  üìù PROP√ìSITO:
     Embaralha os nomes de forma aleat√≥ria para criar a ordem do sorteio
     de amigo secreto. Cada pessoa receber√° como amigo secreto a pr√≥xima
     pessoa na lista embaralhada.
  
  üîß COMO FUNCIONA:
  
  1Ô∏è‚É£ VALIDA√á√ÉO INICIAL:
     if (nomes.length < 2) { ... return; }
     ‚Ä¢ Verifica se h√° pelo menos 2 pessoas para fazer o sorteio
     ‚Ä¢ Se n√£o houver, mostra alerta e sai da fun√ß√£o (return)
     ‚Ä¢ Amigo secreto precisa de no m√≠nimo 2 pessoas!
  
  2Ô∏è‚É£ PREPARA√á√ÉO DOS ARRAYS:
     sorteados.length = 0;
     ‚Ä¢ Limpa o array de sorteados de sorteios anteriores
     ‚Ä¢ Garante que come√ßamos com array vazio
     
     const nomesRestantes = [...nomes];
     ‚Ä¢ Usa SPREAD OPERATOR (...) para criar uma C√ìPIA do array original
     ‚Ä¢ Por que n√£o usar nomes diretamente? Para n√£o modificar o array original!
     ‚Ä¢ nomesRestantes ser√° modificado durante o sorteio, nomes permanece intacto
  
  3Ô∏è‚É£ ALGORITMO DE EMBARALHAMENTO (Algoritmo Fisher-Yates modificado):
     while (nomesRestantes.length > 0) { ... }
     ‚Ä¢ Loop continua enquanto ainda h√° nomes para sortear
     ‚Ä¢ A cada itera√ß√£o, um nome √© escolhido e removido
  
  4Ô∏è‚É£ SORTEIO ALEAT√ìRIO:
     const indiceSorteado = Math.floor(Math.random() * nomesRestantes.length);
     
     üìä EXPLICA√á√ÉO MATEM√ÅTICA:
     ‚Ä¢ Math.random() = gera n√∫mero decimal entre 0 e 1 (ex: 0.7834...)
     ‚Ä¢ * nomesRestantes.length = multiplica pelo tamanho do array
     ‚Ä¢ Math.floor() = arredonda para baixo, sempre um n√∫mero inteiro
     
     üî¢ EXEMPLO PR√ÅTICO com 4 nomes [Ana, Bruno, Carlos, Diana]:
     ‚Ä¢ Math.random() = 0.7 (exemplo)
     ‚Ä¢ 0.7 * 4 = 2.8
     ‚Ä¢ Math.floor(2.8) = 2
     ‚Ä¢ indiceSorteado = 2 (que corresponde a "Carlos")
  
  5Ô∏è‚É£ CAPTURA E ARMAZENAMENTO:
     const nomeSorteado = nomesRestantes[indiceSorteado];
     sorteados.push(nomeSorteado);
     ‚Ä¢ Pega o nome na posi√ß√£o sorteada
     ‚Ä¢ Adiciona no array final de sorteados (mant√©m a ordem do sorteio)
  
  6Ô∏è‚É£ REMO√á√ÉO DO SORTEADO:
     nomesRestantes.splice(indiceSorteado, 1);
     ‚Ä¢ Remove o nome que j√° foi sorteado da lista de restantes
     ‚Ä¢ splice(posi√ß√£o, quantos_remover) = remove 1 elemento na posi√ß√£o
     ‚Ä¢ Isso garante que o mesmo nome n√£o seja sorteado duas vezes!
  
  7Ô∏è‚É£ CHAMADA FINAL:
     exibirResultado();
     ‚Ä¢ Ap√≥s todos os nomes serem embaralhados, mostra o resultado na tela
  
  üéä RESULTADO DO ALGORITMO:
     ‚Ä¢ Array 'sorteados' com todos os nomes em ordem aleat√≥ria
     ‚Ä¢ Cada nome aparece exatamente uma vez
     ‚Ä¢ A ordem determina quem √© amigo secreto de quem (pr√≥ximo na lista)
  
  üí° POR QUE ESTE ALGORITMO FUNCIONA:
     ‚Ä¢ √â justo: cada pessoa tem chance igual de ser sorteada
     ‚Ä¢ √â completo: todos participam exatamente uma vez
     ‚Ä¢ √â aleat√≥rio: ordem √© imprevis√≠vel a cada sorteio
     ‚Ä¢ √â circular: √∫ltima pessoa "d√° presente" para a primeira
  */

  if (nomes.length < 2) {
    alert("Adicione pelo menos dois nomes para sortear.");
    return;
  }

  sorteados.length = 0; // Limpa o array de sorteados
  const nomesRestantes = [...nomes]; // Copia os nomes para evitar muta√ß√£o

  while (nomesRestantes.length > 0) {
    const indiceSorteado = Math.floor(Math.random() * nomesRestantes.length);
    const nomeSorteado = nomesRestantes[indiceSorteado];
    sorteados.push(nomeSorteado);
    nomesRestantes.splice(indiceSorteado, 1); // Remove o nome sorteado
  }

  exibirResultado();
}

function exibirResultado() {
  /*
  üéØ FUN√á√ÉO: exibirResultado()
  
  üìù PROP√ìSITO:
     Exibe o resultado do sorteio de amigo secreto na tela, mostrando
     quem √© o amigo secreto de cada pessoa.
  
  üîß COMO FUNCIONA:
  
  1Ô∏è‚É£ LIMPEZA INICIAL:
     resultado.innerHTML = ""; 
     ‚Ä¢ Limpa qualquer resultado anterior que estava sendo exibido
     ‚Ä¢ Garante que n√£o haja duplica√ß√£o de resultados
  
  2Ô∏è‚É£ LOOP PELOS SORTEADOS:
     sorteados.forEach((nome, index) => { ... })
     ‚Ä¢ Percorre cada nome no array 'sorteados' 
     ‚Ä¢ 'nome' = pessoa atual
     ‚Ä¢ 'index' = posi√ß√£o desta pessoa no array (0, 1, 2, 3...)
  
  3Ô∏è‚É£ CRIA√á√ÉO DO ELEMENTO:
     const li = document.createElement("li");
     ‚Ä¢ Cria um novo elemento <li> (item de lista) 
     ‚Ä¢ Cada resultado ser√° um item separado na lista
  
  4Ô∏è‚É£ L√ìGICA DO AMIGO SECRETO:
     sorteados[(index + 1) % sorteados.length]
     
     üìä EXPLICA√á√ÉO MATEM√ÅTICA:
     ‚Ä¢ (index + 1) = pega a PR√ìXIMA pessoa na lista
     ‚Ä¢ % sorteados.length = operador m√≥dulo (resto da divis√£o)
     
     üîÑ EXEMPLO PR√ÅTICO com 4 pessoas [Ana, Bruno, Carlos, Diana]:
     ‚Ä¢ Ana (index=0): (0+1) % 4 = 1 ‚Üí Bruno
     ‚Ä¢ Bruno (index=1): (1+1) % 4 = 2 ‚Üí Carlos  
     ‚Ä¢ Carlos (index=2): (2+1) % 4 = 3 ‚Üí Diana
     ‚Ä¢ Diana (index=3): (3+1) % 4 = 0 ‚Üí Ana (volta para o in√≠cio!)
     
     üí° O M√ìDULO FAZ A "VOLTA":
     Quando chegamos no √∫ltimo pessoa, o m√≥dulo faz voltar para 
     a primeira, criando um c√≠rculo perfeito onde cada um tem 
     um amigo secreto diferente!
  
  5Ô∏è‚É£ MONTAGEM DO TEXTO:
     li.textContent = `${nome} - Amigo Secreto: ${amigoSecreto}`;
     ‚Ä¢ Template literal (backticks) para criar a frase
     ‚Ä¢ Mostra: "Nome da Pessoa - Amigo Secreto: Nome do Amigo"
  
  6Ô∏è‚É£ INSER√á√ÉO NO DOM:
     resultado.appendChild(li);
     ‚Ä¢ Adiciona o item criado na lista de resultados na tela
     ‚Ä¢ Cada pessoa aparece como um item separado
  
  üéä RESULTADO FINAL:
     Uma lista na tela mostrando quem √© o amigo secreto de cada pessoa,
     garantindo que todos tenham um amigo e formem um c√≠rculo completo!
  */

  resultado.innerHTML = ""; // Limpa o resultado anterior
  sorteados.forEach((nome, index) => {
    const li = document.createElement("li");
    li.textContent = `${nome} - Amigo Secreto: ${
      sorteados[(index + 1) % sorteados.length]
    }`;
    resultado.appendChild(li);
  });
}

function limparLista() {
  nomes.length = 0; // Limpa o array de nomes
  sorteados.length = 0; // Limpa o array de sorteados
  listaNomes.innerHTML = ""; // Limpa a lista de nomes
  resultado.innerHTML = ""; // Limpa o resultado
  nomeInput.value = ""; // Limpa o campo de entrada
  atualizarBotoes(); // Atualiza o estado dos bot√µes
}

adicionarBtn.addEventListener("click", adicionarNome);
sortearBtn.addEventListener("click", sortearNomes);
limparBtn.addEventListener("click", limparLista);

// Inicializa o estado dos bot√µes
atualizarBotoes();

// Permite adicionar nome ao pressionar Enter no campo de texto
nomeInput.addEventListener("keydown", function (event) {
  if (event.key === "Enter") {
    adicionarNome();
  }
});
